# Eto-ne-itertools

Наша команда розробляла аналог вбудованої бібліотеки ***itertools*** мови Python 3, яка дає можливість використовувати готові функції для генерування комбінаторних об’єктів (перестановок, сполучень, розміщень тощо).

Автори: 
[Артем Овсепян](https://github.com/ovsartem),
[Богдан Шевчук](https://github.com/shevdan),
[Дмитро Ярошевич](https://github.com/dyaroshevych),
[Юрій Нефедов](https://github.com/yuriynefedov),
[Ярослав Бровченко](https://github.com/firstgenius).

## Функції

### **combinations(r, n)**

Повертає генератор комбінацій з n по r елементів у
відсортованому порядку. Реалізовує алгоритм побудови сполучень без повторень з n елементів по r із курсу дискретної математики.

*(автор: Дмитро Ярошевич)*


### **combinations_with_replacement(r, n)**

Повертає генератор комбінацій з n по r елементів з повтореннями у відсортованому порядку. Реалізовує алгоритм побудови сполучень з повтореннями з n елементів по r із курсу дискретної математики.

*(автор: Дмитро Ярошевич)*

### **count(start=0, step=1)**

Створює ітератор нескінченного циклу по цілих числах (start, start+step, start+2*step, …).

*(автор: Артем Овсепян)*


### **сycle(iterable)**

Для створення нескінченного ітератора, який за допомогою next циклічно повертає по одному елементу з iterable.

*(автор: Артем Овсепян)*

### **permutations(iterable, length=None)**

Рекурсивно відтворює всі розміщення заданої довжини в ітерованому об‘єкті. Результатом роботи функції є генератор, що володіє методом next та, зокрема, властивостями ітерованого об‘єкту. Через те, що розміщення в процесі роботи функції повертаються за допомогою методу yield, комп‘ютер використовує менше ресурсів, аніж за умови повернення одразу всіх розміщень.

*(автор: Юрій Нефедов)*

### **product(\*iterables)**

Повертає генератор декартового добутку ітерованих об'єктів.  Вона реалізовує алгоритм знаходження декартового добутку з теми множин дискретної математики.
За допомогою yield функції виконуються швидко та не використовують зайві ресурси комп'ютера.

*(автор: Богдан Шевчук)*

### **repeat(value)**

Повертає нескіненний генератор повторюваного значення.

*(автор: Богдан Шевчук)*


## Модуль для тестування

Модуль написано з використанням *unittests* з метою перевірки працездатності всіх функцій бібліотеки. Під кожну функцію модуля створено окремий підклас, в якому прописані окремі функції, які тестують модуль з різних зазначених «сторін».


## Фідбек учасників

### Юрій Нефедов

> Протягом роботи над командним проектом я відповідав за алгоритмічну розробку, власне написання та тестування функції-генератора permutations, а також за написання та оформлення підсумкового звіту, що ви зараз читаєте :wink:. Зараз, коли командна робота вже добігає кінця, можу абсолютно точно зазначити, що вважаю її успішною (!), адже ми з товаришами мали прекрасну можливість присвятити час спільній меті, поєднуючи приємне з корисним. Персонально, маю відзначити, що даний проект став для мене вагомою (та новою!) візуалізацією поєднання дискретної математики, алгоритмічного підходу до вирішення проблем та, звичайно, навичків програмування на Python, що допомогли втілити всі вищевказані пункти у життя. Дякую за круті враження та якісний вибір завдань!

### Ярослав Бровченко

> Моя участь в командному завданні - написання тестів для даної бібліотеки з допомогою unittests, щоб перевірити працездатність бібліотеки, а також написання висновку на фінальному етапі роботи. З тестуванням модуля я зустрівся вперше і це був корисний досвід для мене. Пишучи тести до кожної функції бібліотеки, я розібрався з усіма функціями і згадав відповідні теми з дискретної. Даний комп’ютерний проект я вважаю корисним, бо завдяки проекту я розширив свої знання в програмуванні та згадав пройдений матеріал з дискретної.

### Дмитро Ярошевич

> У процесі роботи над командним проектом я відповідав за розробку функцій combinations та combinations_with_replacement, які реалізовують алгоритми побудови сполучень з n елементів по r. Я вважаю командну роботу цілком успішною, адже завдяки злагодженій праці усіх членів команди та використанню зручної системи контролю версій git нам вдалося досягти поставленої мети, а саме - реалізувати деякі функції бібліотеки itertools та перевірити правильність їх виконання. Організація проекту була на високому рівні, адже запропоновані теми були  не лише цікавими з точки зору дискретної математики, а й повністю відповідали набутим за семестр навичкам програмування мовою Python.


### Богдан Шевчук

> Я робив функції repeat з генерації нескінченного повтору значення і product для знаходження декартового добутку. Я задоволений результатом проекту, роботою своїх товаришів, досвідом і знаннями, які я отримав під час роботи над ним. За допомогою цього проекту я краще зрозумів принцип роботи комбінаторики з боку алгоритмістики і покращив свої навички програмування.


### Артем Овсепян

> Я цілком задоволений виконанням командного проекту. Завдяки таким завданням ми (студенти УКУ) по-справжньому навчаємося командній праці, що є однією з найважливіших навичок в наш час. Поєднання дискретної математики з програмуванням чудово закріпило мої знання з даних курсів. Від себе хочу подякувати людям, які створюють такі цікаві завдання!



## Висновок

Нам вдалося написати власний варіант бібліотеки *itertools*, реалізувавши всі потрібні функції згідно з наданою [документацією](https://docs.python.org/2/library/itertools.html) та поставленим завданням. Також наша команда написала власний модуль з тестами для даної бібліотеки з допомогою unittests.


## Ліцензія
[MIT](https://choosealicense.com/licenses/mit/)
